CODE FOR PIPLINED PROCESSOR DESIGN
1. Top Module Skeleton
verilog
Copy
Edit
module PipelinedCPU (
    input clk,
    input reset
);

// Define wires and pipeline registers between stages here

// Instantiate pipeline stages
InstructionFetch IF_stage (...);
InstructionDecode ID_stage (...);
Execute EX_stage (...);
MemoryAccess MEM_stage (...);
WriteBack WB_stage (...);

endmodule
2. Instruction Fetch (IF)
verilog
Copy
Edit
module InstructionFetch (
    input clk,
    input reset,
    output reg [31:0] instr,
    output reg [31:0] pc_out
);
    reg [31:0] pc;
    reg [31:0] instr_mem [0:255];

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            pc <= 0;
        end else begin
            instr <= instr_mem[pc[9:2]]; // word aligned
            pc_out <= pc;
            pc <= pc + 4;
        end
    end
endmodule
3. Instruction Decode (ID)
verilog
Copy
Edit
module InstructionDecode (
    input [31:0] instr,
    input [31:0] pc_in,
    output reg [4:0] rs, rt, rd,
    output reg [31:0] imm
);
    always @(*) begin
        rs = instr[25:21];
        rt = instr[20:16];
        rd = instr[15:11];
        imm = {{16{instr[15]}}, instr[15:0]}; // sign extend
    end
endmodule
4. Execute (EX)
verilog
Copy
Edit
module Execute (
    input [31:0] imm,
    input [4:0] rs, rt,
    input [31:0] reg_data1, reg_data2,
    output reg [31:0] alu_result
);
    always @(*) begin
        alu_result = reg_data1 + imm; // Simplified: only ADDI-style
    end
endmodule
5. Memory Access (MEM)
verilog
Copy
Edit
module MemoryAccess (
    input [31:0] alu_result,
    input [31:0] reg_data2,
    output reg [31:0] mem_out
);
    reg [31:0] data_mem [0:255];

    always @(*) begin
        mem_out = data_mem[alu_result[9:2]]; // simplified load
    end
endmodule
6. Write Back (WB)
verilog
Copy
Edit
module WriteBack (
    input [31:0] mem_out,
    input [4:0] rd,
    output reg [31:0] reg_write_data,
    output reg [4:0] reg_write_addr
);
    always @(*) begin
        reg_write_data = mem_out;
        reg_write_addr = rd;
    end
endmodule
